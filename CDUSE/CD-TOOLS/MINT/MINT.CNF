# MiNT configuration file. Edit this with a normal ASCII text editor
# Lines starting with '#' are comments. Other lines are commands for
# MiNT to execute at boot up, or variables that control how MiNT
# behaves.

# Here are some variables you can set. First, and most important, is the
# full path+name of the program to execute at boot up time. If this
# is not specified, MiNT will boot the version of GEM in ROM.

INIT=c:\mint\tcsh.ttp

#
# OK; other things you can change if you want to. There are reasonable
# defaults for all of these.
#

# MAXMEM= gives the maximum amount of memory that any process may use
# (in kilobytes). The default is to make this unlimited, but if you have
# a lot of memory and/or programs that grab more memory than they should,
# try setting this.
# e.g. to limit processes to 4096K of memory, remove the '#' at the
# beginning of the next line.

#MAXMEM=4096

# SLICES controls how long a process may run before being interrupted.
# The default value (2) is usually best, but if you tend to run
# very processor intensive applications in the foreground, you might
# want to put SLICES=3 (this makes cpu hogs get more time than they
# otherwise would).

#SLICES=3

# DEBUG_LEVEL controls output of debugging information. The higher
# the level, the more stuff MiNT will spew about about what it's doing.
# The average user doesn't want to hear about this stuff, so the default
# is 0.
# DEBUG_DEVNO is the BIOS device number to which the info should be sent.
# The default is the screen

#DEBUG_LEVEL=1
#DEBUG_DEVNO=3

# BIOSBUF controls how BIOS I/O is performed. Normally, MiNT tries to buffer
# this to provide a (considerable) improvement in speed. However, some
# applications may get upset by this. BIOSBUF=no turns off all buffering
# for maximum compatibility.

#BIOSBUF=no

#
# Here are some commands that you can give to MiNT:
# alias d: path	-- make a fake "drive" that actually points to the given
					path
# cd path		-- changes MiNT's default directory
# echo message	-- print something on the screen
# exec program	-- runs a program; you must give the complete path
#					and file extensions (e.g. c:\bin\echo.prg)
# sln path link	-- make a symbolic link named "link" pointing to "path"
#					"link" must be on drive U: for this to work

# Examples follow
#
# Old versions of MiNT used drive letters Q:, X:, and V: to stand for
# the pipe, process, and device directories, respectively. This is no
# longer directly supported, but we can use 'alias' to achieve the same
# effect, as follows:
#
#alias q: u:\pipe
#alias x: u:\proc
#alias v: u:\dev

#You could also use "alias" to provide a quick way of getting at
#nested directories, e.g. if you do
#alias r: c:\some\long\path
#then clicking on drive r: puts you into the folder c:\some\long\path

#
# The "echo" command is really straightforward.
#
#echo Now booting MiNT.
#

#
# The "exec" command is used to launch programs. Note that programs
# so launched are started before GEM is, so they must be TOS/TTP
# programs. Most commonly used for starting device drivers.

#exec c:\mint\clockdev.prg -a

#
# The "sln" command may be used to create "links" on drive U:. If
# u:\foo is a link to c:\bar, then u:\foo\foo.txt is another way
# of saying c:\bar\foo.txt. Judicious use of links can make
# re-arranging hard disks and directories painless (if you always
# use the names on drive u:, it doesn't matter where you put
# the actual directories).

#sln c:\bin u:\bin
#sln c:\mint\app u:\app
#sln d:\termcap\etc u:\etc


