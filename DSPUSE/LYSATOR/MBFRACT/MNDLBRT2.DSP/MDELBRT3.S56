; This is the DSP source for the mandelbrot generator.
; Author: Fredrik Noring, February 1994.
;

main	equ	$40
param	equ	$1000

HSR	equ	$ffe9
HTX	equ	$ffeb
HRX	equ	$ffeb

	org y:param
	dc 0		; input r
	dc 0		; input i
	dc 0		; x
	dc 0		; y
	dc 0		; temporary x
	dc 0		; temporary y
	dc 0		; n iterations
miter	dc 0		; maximum iterations
	dc 1		; inc
dx	dc 0
dy	dc 0
fx	dc 0
fy	dc 0
tables
f_tab	ds 512

	org p:main
	move	#-1,m0
	move	m0,m1
	move	m0,m2
	move	m0,m3
	move	m0,m4
	move	m0,m5
	move	m0,m6
	move	m0,m7

	move	#param+7,r7	; miter
	jsr	gparam
	move	x0,y:(r7)

	move	#fx,r7		; fx
	jsr	gparam
	move	x0,y:(r7)

	move	#fy,r7		; fy
	jsr	gparam
	move	x0,y:(r7)

	move	#fx,r6
	move	#1,n6
	move	#tables,r7
	move	y:(r6),x0
	move	x0,a
	move	y:(r6+n6),x0
	add	x0,a

	do	a,rmore
	jsr	gparam
	move	x0,y:(r7)+
rmore
	move	#dy,r0
	move	#fx,r1
	move	#f_tab,r2
	move	y:(r1),x0
	move	x0,a
	move	r2,x0
	add	x0,a
	move	a,y:(r0)

	move	#fy,r0
	move	y:(r0),x0
	do	x0,y_loop
	move	#dy,r0
	move	#param+1,r1
	move	y:(r0),r2
	nop
	move	y:(r2)+,x0
	move	x0,y:(r1)
	move	r2,y:(r0)

	move	#dx,r0
	move	#f_tab,r1
	move	r1,y:(r0)

	move	#fx,r0
	nop
	move	y:(r0),x0
	do	x0,x_loop
	move	#dx,r0
	move	#param,r1
	move	y:(r0),r2
	nop
	move	y:(r2)+,x0
	move	x0,y:(r1)
	move	r2,y:(r0)

; Initialization
	move	#param+6,r7	; n
	move	#2,n7		; inc
	nop
	move	y:(r7+n7),x0
	move	x0,y:(r7)

	move	#param+0,r0	; r
	move	#1,n0		; i
	move	#param+2,r1	; x
	move	#1,n1		; i
	move	#param+4,r2	; temporary x
	move	#1,n2		; temporary y

	move	y:(r0),x0
	move	x0,y:(r1)	; r -> x
	move	y:(r0+n0),x0
	move	x0,y:(r1+n1)	; i -> y

	move	#1,n7		; maximum iterations
	nop
	move	y:(r7+n7),x0
	move	#2,n7		; inc

	move	x0,a
	move	y:(r7+n7),x0
	sub	x0,a
	move	a,x0

	do	x0,next
loop	move	y:(r1),x0
	mpy	x0,x0,a		y:(r1+n1),x0
	mpy	x0,x0,b		#$080000,x0	; x0 = 4
	add	a,b		b,y1	; (!!! b is NOT updated!!!)
	cmp	x0,b		y1,b	; x*x + y*y > 4
	jhs	resume

	sub	b,a	y:(r0),x0	; x*x - y*y
	rep	#3
	lsl	a
	add	x0,a		; x*x - y*y + r
	move	a,x0
	move	x0,y:(r2)	; x*x - y*y + r -> temporary x

	move	y:(r1),x0
	move	x0,a
	add	x0,a		; 2*x
	move	y:(r1+n1),x0
	move	a,x1
	mpy	x0,x1,a		y:(r0+n0),x0	; 2*x*y
	rep	#3
	lsl	a
	move	y:(r0+n0),x0
	add	x0,a		y:(r2),y0 ; (temporary x -> y0)
	move	a,x0		y0,y:(r1) ; (y0 -> x)
	move	x0,y:(r1+n1)	; 2*x*y + i -> y

	move	y:(r7),x0
	move	x0,a1
	move	y:(r7+n7),x0
	add	x0,a
	move	a1,x0
	move	x0,y:(r7)	; n++

next	jmp	hit
resume	enddo
hit	jsr	send_n
x_loop	nop
y_loop	nop
forever	jmp	forever

; Get the parameters
gparam	jclr	#0,x:HSR,gparam
	movep	x:HRX,x0
	rts

; Send number of integers
send_n	move	y:(r7),x0
swait	jclr	#1,x:HSR,swait
	movep	x0,x:HTX
	rts

	end